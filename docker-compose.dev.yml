version: '3.8'

services:
  # Development application
  app-dev:
    build:
      context: .
      dockerfile: Dockerfile.dev
    container_name: ecommerce-backend-dev
    restart: unless-stopped
    ports:
      - "5000:5000"
      - "9229:9229"  # Node.js debug port
    environment:
      - NODE_ENV=development
      - PORT=5000
      - MONGODB_URI=mongodb://mongo:27017/ecommerce-dev
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=dev-secret-key
      - FRONTEND_URL=http://localhost:5173
      - CORS_ORIGIN=http://localhost:5173
    depends_on:
      - mongo
      - redis
    volumes:
      - .:/app
      - /app/node_modules
      - ./logs:/app/logs
      - ./uploads:/app/uploads
      - ./docs:/app/docs
    networks:
      - ecommerce-dev-network
    command: ["npm", "run", "dev"]
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:5000/api/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # MongoDB database (development)
  mongo:
    image: mongo:6.0
    container_name: ecommerce-mongo-dev
    restart: unless-stopped
    ports:
      - "27017:27017"
    environment:
      - MONGO_INITDB_ROOT_USERNAME=admin
      - MONGO_INITDB_ROOT_PASSWORD=password
      - MONGO_INITDB_DATABASE=ecommerce-dev
    volumes:
      - mongo_dev_data:/data/db
      - ./server/scripts/init-mongo.js:/docker-entrypoint-initdb.d/init-mongo.js:ro
    networks:
      - ecommerce-dev-network
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Redis cache (development)
  redis:
    image: redis:7-alpine
    container_name: ecommerce-redis-dev
    restart: unless-stopped
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes --requirepass password
    volumes:
      - redis_dev_data:/data
    networks:
      - ecommerce-dev-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # MongoDB Express (Admin UI)
  mongo-express:
    image: mongo-express:latest
    container_name: ecommerce-mongo-express-dev
    restart: unless-stopped
    ports:
      - "8081:8081"
    environment:
      - ME_CONFIG_MONGODB_ADMINUSERNAME=admin
      - ME_CONFIG_MONGODB_ADMINPASSWORD=password
      - ME_CONFIG_MONGODB_URL=mongodb://admin:password@mongo:27017/
      - ME_CONFIG_BASICAUTH_USERNAME=admin
      - ME_CONFIG_BASICAUTH_PASSWORD=password
    depends_on:
      - mongo
    networks:
      - ecommerce-dev-network

  # Redis Commander (Admin UI)
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: ecommerce-redis-commander-dev
    restart: unless-stopped
    ports:
      - "8082:8081"
    environment:
      - REDIS_HOSTS=local:redis:6379:0:password
    depends_on:
      - redis
    networks:
      - ecommerce-dev-network

  # MailHog for email testing
  mailhog:
    image: mailhog/mailhog:latest
    container_name: ecommerce-mailhog
    restart: unless-stopped
    ports:
      - "1025:1025"  # SMTP
      - "8025:8025"  # Web UI
    networks:
      - ecommerce-dev-network

  # Jaeger for distributed tracing
  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: ecommerce-jaeger
    restart: unless-stopped
    ports:
      - "16686:16686"  # Web UI
      - "14268:14268"  # HTTP collector
      - "14250:14250"  # gRPC collector
    environment:
      - COLLECTOR_OTLP_ENABLED=true
    networks:
      - ecommerce-dev-network

volumes:
  mongo_dev_data:
    driver: local
  redis_dev_data:
    driver: local

networks:
  ecommerce-dev-network:
    driver: bridge 