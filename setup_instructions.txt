==========================
1. .env (in /server folder)
==========================
MONGO_URI=mongodb://localhost:27017/scienceapparel
PORT=5000
# ...other env variables

==========================
2. server/app.js (CORS + Static Files)
==========================
const express = require('express');
const cors = require('cors');
const path = require('path');
// ...other requires

const app = express();

// CORS for API and static files
app.use(cors({
  origin: 'http://localhost:5173',
  credentials: true,
  methods: ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS'],
  allowedHeaders: ['Content-Type', 'Authorization']
}));

// Serve static files with CORS headers for images
app.use('/uploads', (req, res, next) => {
  res.header('Access-Control-Allow-Origin', 'http://localhost:5173');
  res.header('Access-Control-Allow-Methods', 'GET,OPTIONS');
  res.header('Access-Control-Allow-Headers', 'Content-Type, Authorization');
  next();
}, express.static(path.join(__dirname, 'uploads')));

// ...rest of your app.js

==========================
3. server/routes/upload.js (Image Upload Endpoint)
==========================
const express = require('express');
const multer = require('multer');
const path = require('path');
const router = express.Router();

const storage = multer.diskStorage({
  destination: function (req, file, cb) {
    cb(null, path.join(__dirname, '../uploads/images'));
  },
  filename: function (req, file, cb) {
    const uniqueSuffix = Date.now() + '-' + Math.round(Math.random() * 1E9);
    cb(null, uniqueSuffix + '-' + file.originalname.replace(/\s+/g, ''));
  }
});
const upload = multer({ storage: storage });

router.post('/', upload.single('image'), (req, res) => {
  if (!req.file) {
    return res.status(400).json({ success: false, message: 'No file uploaded' });
  }
  // Only return the filename, not the full path
  res.json({ success: true, path: req.file.filename });
});

module.exports = router;

==========================
4. MongoDB Product Document (image field)
==========================
/*
Example product document in MongoDB:
{
  name: "Sample Product",
  ...,
  image: "1689876543210-test.jpg", // Just the filename!
  ...
}
*/

==========================
5. client/src/pages/Admin/components/ProductTable.jsx (Image URL Construction)
==========================
const getImageUrl = (imagePath) => {
  if (!imagePath) return null;
  if (imagePath.startsWith('http')) return imagePath;
  // Always use /uploads/images/ for product images
  return `http://localhost:5000/uploads/images/${imagePath}`;
};

// ...in your <img> tag:
<img
  src={getImageUrl(product.image)}
  alt={product.name ? `Product image for ${product.name}` : 'Product image'}
  className="h-12 w-12 object-cover rounded"
  onError={(e) => {
    e.target.src = '/placeholder.png';
    e.target.onerror = null;
  }}
/>

==========================
6. client/src/pages/Admin/components/ProductImageUpload.jsx (Image Upload)
==========================
const handleImageUpload = async (e) => {
  const file = e.target.files[0];
  if (!file) return;
  const formData = new FormData();
  formData.append('image', file);
  setUploading(true);
  setImageError('');
  try {
    const res = await fetch('http://localhost:5000/api/upload', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${localStorage.getItem('token')}`
      },
      body: formData,
    });
    const data = await res.json();
    if (!res.ok) {
      throw new Error(data.message || 'Image upload failed');
    }
    setImage(data.path); // Just the filename
    setForm((prev) => ({ ...prev, image: data.path }));
  } catch (err) {
    setImageError(err.message || 'Image upload failed');
    alert(err.message || 'Image upload failed');
  }
  setUploading(false);
};

==========================
7. SEEDING (server/seed.js)
==========================
/*
Make sure your seed script sets the image field to just the filename, e.g.,
image: "sample-image.jpg"
// and not a full path or /uploads/images/sample-image.jpg
*/

==========================
8. TESTING
==========================
/*
1. Restart your backend server after making these changes.
2. Add a new product with an image.
3. In MongoDB, the product's image field should be just the filename.
4. In the browser, the image should load from http://localhost:5000/uploads/images/yourfilename.jpg
5. If you open that URL in a new tab, you should see the image.
*/ 